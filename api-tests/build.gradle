plugins {
    id 'java'
    alias(libs.plugins.allure)
}

group = 'org.example'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation libs.jacksonDatabind
    implementation libs.jacksonAnnotations
    implementation libs.restAssured
    implementation libs.logback.classic
    implementation libs.slf4j.ext
    implementation libs.javafaker
    
    testImplementation libs.testng
    implementation libs.allureRestAssured
}

test {
    useTestNG() {
        parallel = 'methods'
        threadCount = Runtime.runtime.availableProcessors()
        outputDirectory = layout.buildDirectory.dir("test-output").get().asFile
        useDefaultListeners = true
    }
    
    // TestNG parallel execution configuration
    maxParallelForks = Runtime.runtime.availableProcessors()
    
    // HTML reports configuration
    reports {
        html.required = true
        html.outputLocation = layout.buildDirectory.dir("reports${File.separator}tests${File.separator}html")
        junitXml.required = true
    }
}

allure {
    version = '2.25.0'

    useTestNG {
        version = '2.25.0'
    }
}

// Task to open HTML test report in browser (Gradle built-in)
tasks.register('showHtmlReport') {
    group = 'verification'
    description = 'Opens Gradle HTML test report in default browser'
    
    doLast {
        def reportFile = layout.buildDirectory.file("reports${File.separator}tests${File.separator}html${File.separator}index.html").get().asFile
        
        if (reportFile.exists()) {
            if (System.getProperty('os.name').toLowerCase().contains('mac')) {
                project.exec {
                    commandLine 'open', reportFile.absolutePath
                }
            } else if (System.getProperty('os.name').toLowerCase().contains('win')) {
                project.exec {
                    commandLine 'cmd', '/c', 'start', '""', reportFile.absolutePath
                }
            } else {
                project.exec {
                    commandLine 'xdg-open', reportFile.absolutePath
                }
            }
            println "Opening Gradle HTML report: ${reportFile.absolutePath}"
        } else {
            println "HTML report not found. Run tests first with: ./gradlew test"
        }
    }
}

// Task to open TestNG HTML report in browser  
tasks.register('showTestNGReport') {
    group = 'verification'
    description = 'Opens TestNG HTML report in default browser'
    
    doLast {
        def testNGReportFile = layout.buildDirectory.file("test-output${File.separator}index.html").get().asFile
        
        if (testNGReportFile.exists()) {
            if (System.getProperty('os.name').toLowerCase().contains('mac')) {
                project.exec {
                    commandLine 'open', testNGReportFile.absolutePath
                }
            } else if (System.getProperty('os.name').toLowerCase().contains('win')) {
                project.exec {
                    commandLine 'cmd', '/c', 'start', '""', testNGReportFile.absolutePath
                }
            } else {
                project.exec {
                    commandLine 'xdg-open', testNGReportFile.absolutePath
                }
            }
            println "Opening TestNG HTML report: ${testNGReportFile.absolutePath}"
        } else {
            println "TestNG HTML report not found. Run tests first with: ./gradlew test"
        }
    }
}